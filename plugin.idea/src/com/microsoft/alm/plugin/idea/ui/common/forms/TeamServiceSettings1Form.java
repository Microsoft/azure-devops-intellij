// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the project root.

package com.microsoft.alm.plugin.idea.ui.common.forms;

import com.intellij.icons.AllIcons;
import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.ui.AnActionButton;
import com.intellij.ui.AnActionButtonRunnable;
import com.intellij.ui.ToolbarDecorator;
import com.intellij.ui.treeStructure.Tree;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.intellij.util.PlatformIcons;
import com.microsoft.alm.plugin.idea.resources.Icons;
import com.microsoft.alm.plugin.idea.ui.controls.IconPanel;
import com.microsoft.alm.plugin.idea.ui.controls.UserAccountPanel;

import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JSplitPane;
import javax.swing.JTextField;
import javax.swing.JTree;
import javax.swing.ListCellRenderer;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.TreeCellRenderer;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.Label;
import java.awt.LayoutManager;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by madhurig on 12/10/2015.
 */
public class TeamServiceSettings1Form {
    private JTextField textField1;
    private JPanel contentPanel;
    private JPanel connectionsPanel;
    private JTree tree1;

    public TeamServiceSettings1Form() {
    }

    public JComponent getContentPanel() {
        ensureInitialized();
        return contentPanel;
    }

    private void ensureInitialized() {
        DefaultListModel m = new DefaultListModel();
        m.addElement(new UserObject("raisap@microsoft.com", false));
        m.addElement(new UserObject("REDMOND\\raisap", true));


        DefaultListModel m1 = new DefaultListModel();
        m1.addElement("Java.IntelliJ (https://mseng.visualstudio.com/DefaultCollection/VSOnline/_git/Java.IntelliJ)");
        m1.addElement("Agent.Tasks (https://mseng.visualstudio.com/DefaultCollection/VSOnline/_git/Agent.Tasks)");

        DefaultMutableTreeNode top = new DefaultMutableTreeNode("Known Connections");
        DefaultMutableTreeNode child1 = new DefaultMutableTreeNode(new UserObject("raisap@microsoft.com", false));
        DefaultMutableTreeNode child1_1 = new DefaultMutableTreeNode("https://mseng.visualstudio.com");
        DefaultMutableTreeNode child1_2 = new DefaultMutableTreeNode("https://microsoft.visualstudio.com");
        child1.add(child1_1);
        child1.add(child1_2);
        DefaultMutableTreeNode child2 = new DefaultMutableTreeNode(new UserObject("REDMOND\\raisap", true));
        DefaultMutableTreeNode child2_1 = new DefaultMutableTreeNode("http://mghost1:8080/tfs");
        child2.add(child2_1);
        top.add(child1);
        top.add(child2);
        tree1 = new Tree(top);
        tree1.setRootVisible(false);
        tree1.putClientProperty("JTree.lineStyle", "Horizontal");
        tree1.setCellRenderer(new MyCellRenderer());

        final AnActionButton deleteConnection = new AnActionButton("Delete Connection", AllIcons.Actions.Delete) {
            @Override
            public void actionPerformed(AnActionEvent e) {

            }
        };

        final AnActionButton updateCredentials = new AnActionButton("Update Credentials", AllIcons.Actions.Refresh) {
            @Override
            public void actionPerformed(AnActionEvent e) {

            }
        };


        contentPanel = ToolbarDecorator.createDecorator(tree1)
                .setRemoveAction(new AnActionButtonRunnable() {
                    @Override
                    public void run(AnActionButton anActionButton) {

                    }
                }).setRemoveActionName("Delete creden")
                .setEditAction(new AnActionButtonRunnable() {
                    @Override
                    public void run(AnActionButton anActionButton) {

                    }
                }).setEditActionName("Update credentials")
                .disableUpDownActions()
                .disableAddAction()
                .createPanel();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPanel = new JPanel();
        contentPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPanel.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel1.setBorder(BorderFactory.createTitledBorder("Preferences"));
        final JLabel label1 = new JLabel();
        label1.setText("Repository root folder:");
        panel1.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textField1 = new JTextField();
        textField1.setText("C:\\users\\raisap");
        panel1.add(textField1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        connectionsPanel = new JPanel();
        connectionsPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPanel.add(connectionsPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        connectionsPanel.setBorder(BorderFactory.createTitledBorder(""));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPanel;
    }

    class UserObject {
        public String userName;
        public boolean isWindowsAccount;
        List<String> gitRepos;

        public UserObject(final String userName, final boolean isWindowsAccount) {
            this.userName = userName;
            this.isWindowsAccount = isWindowsAccount;
            gitRepos = new ArrayList<String>();
        }

        public void addRepo(String repoUrl) {
            gitRepos.add(repoUrl);
        }

    }

    /*class MyCellRenderer implements ListCellRenderer {
        // This is the only method defined by ListCellRenderer.
        // We just reconfigure the JLabel each time we're called.

        public Component getListCellRendererComponent(
                JList list,           // the list
                Object value,            // value to display
                int index,               // cell index
                boolean isSelected,      // is the cell selected
                boolean cellHasFocus)    // does the cell have focus
        {
            JLabel label = new JLabel();
            label.setText(((UserObject) value).userName);
            if (((UserObject) value).isWindowsAccount) {
                label.setIcon(Icons.WindowsAccount);
            } else {
                label.setIcon(Icons.VsoAccount);
            }

            JPanel panel = new JPanel();
            panel.add(label, 0);

            for (int i = 0; i < ((UserObject) value).gitRepos.size(); i++) {
                panel.add(new Label(((UserObject) value).gitRepos.get(i)));
            }

            Component component = panel;
            component.setForeground(Color.BLACK);
            component.setBackground(isSelected ? Color.GRAY : Color.WHITE);


            return component;
        }
    }*/

    class MyCellRenderer extends DefaultTreeCellRenderer {
        // This is the only method defined by ListCellRenderer.
        // We just reconfigure the JLabel each time we're called.

        public Component getTreeCellRendererComponent(
                JTree tree,
                Object value,
                boolean sel,
                boolean expanded,
                boolean leaf,
                int row,
                boolean hasFocus) {

            super.getTreeCellRendererComponent(tree, value, sel, expanded, leaf, row, hasFocus);
            if (!leaf) {
                UserObject object = (UserObject) ((DefaultMutableTreeNode) value).getUserObject();
                setText(object.userName);
                if (object.isWindowsAccount) {
                    setIcon(Icons.WindowsAccount);
                } else {
                    setIcon(Icons.VsoAccount);
                }
            } else {
                setIcon(null);
            }

            return this;
        }
    }


}
