// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the project root.

import java.nio.file.Files
import java.nio.file.Paths
import java.security.MessageDigest

plugins {
    id "base"
    id "de.undercouch.download"
}

ext {
    sdkVersion = "14.135.1"
    sdkArchiveLocation = file("$buildDir/TFS-SDK-${sdkVersion}.zip")
    expectedSdkArchiveHash = "0CB218AB6A3D6312904BE2EFA2258C2009112E3D069ACE331FBCE68CE6389C39"
    sdkUnpackLocation = file("$buildDir/sdk")
    sdkJarName = "com.microsoft.tfs.sdk-${sdkVersion}.jar"
}

task downloadArchive(type: Download) {
    src "https://github.com/JetBrains/team-explorer-everywhere/releases/download/$sdkVersion/TFS-SDK-${sdkVersion}.zip"
    dest sdkArchiveLocation
    overwrite false
}

task verifyArchive(dependsOn: downloadArchive) {
    doLast {
        def digest = MessageDigest.getInstance("SHA-256")
        def bytes = Files.readAllBytes(Paths.get(sdkArchiveLocation.absolutePath))
        def hash = String.format("%064x", new BigInteger(1, digest.digest(bytes)))
        if (!hash.equalsIgnoreCase(expectedSdkArchiveHash)) {
            delete sdkArchiveLocation
            throw new RuntimeException("Expected hash: $expectedSdkArchiveHash, actual hash: $hash\nPlease retry build")
        }
    }
}

task unpack(type: Copy, dependsOn: [downloadArchive, verifyArchive]) {
    from(zipTree(sdkArchiveLocation)) {
        include "TFS-SDK-$sdkVersion/redist/lib/*.jar"
        eachFile { fcd ->
            fcd.relativePath = new RelativePath(true, fcd.relativePath.segments.drop(3))
        }
        includeEmptyDirs = false
    }
    into sdkUnpackLocation
}

artifacts.add("default", file("$sdkUnpackLocation/$sdkJarName")) {
    builtBy unpack
}
