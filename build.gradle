/**
 * This is the main gradle build file for the Azure DevOps IntelliJ Plugin.
 */
buildscript {
    ext {
        rdGenVersion = '0.193.37'

    }
    repositories {
        maven {
            url "https://cache-redirector.jetbrains.com/www.myget.org/F/rd-snapshots/maven"
        }
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url 'https://dl.bintray.com/jetbrains/intellij-plugin-service'
        }
    }
    dependencies {
        classpath "com.jetbrains.rd:rd-gen:$rdGenVersion"
        classpath "org.jetbrains.intellij.plugins:gradle-intellij-plugin:0.5.0-SNAPSHOT"
    }
}

plugins {
//    id 'org.jetbrains.intellij' version '0.4.1' apply false
    id "org.jetbrains.kotlin.jvm" version "1.3.50" apply false
    id "de.undercouch.download" version "4.0.0" apply false
}

/**
 *This is task for update Gradle wrapper version.
 */
task wrapper(type: Wrapper) {
    gradleVersion = '4.9'
    distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

def mainProjects = [project(":L2Tests"), project(":plugin")]

/**
 * settings common to ALL projects (even the root level project)
 */
allprojects {
    repositories {
        mavenCentral()
        maven {
            url "http://artifacts.eastus.cloudapp.azure.com:8081/nexus/content/repositories/snapshots"
        }
        maven {
            url "http://artifacts.eastus.cloudapp.azure.com:8081/nexus/content/repositories/releases"
        }
        maven {
            url "https://cache-redirector.jetbrains.com/www.myget.org/F/rd-snapshots/maven"
        }
    }
}

/**
 * settings shared by the main projects (part 1)
 */
configure(mainProjects) {
    configurations {
        codeAnalysisLibs

        // Some our dependencies should be included *before* dependencies from IDEA (e.g. junit, jackson-databind). IDEA
        // has some versions of these dependencies that sometimes break tests (see comments for particular dependencies
        // included into this configuration for details).
        priorityTestCompile
    }

    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'findbugs'


    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    task unitTest(type: Test) {
        exclude '**/L2/**'
    }
    
    sourceSets {
        main {
            compileClasspath += configurations.codeAnalysisLibs

            java {
                srcDir 'src'
            }

            resources {
                srcDir 'resources'
            }
        }

        test {
            def setUpDependencies = { originalCollection ->
                configurations.priorityTestCompile + originalCollection + configurations.codeAnalysisLibs
            }

            compileClasspath = setUpDependencies(compileClasspath)
            runtimeClasspath = setUpDependencies(runtimeClasspath)

            java {
                srcDir 'test'
            }
        }
    }

    test {
        forkEvery = 10
    }
}

/**
 * specific settings for each project
 */
project(":plugin") {
    apply plugin: 'org.jetbrains.intellij'

    dependencies {
        compile project(":client:connector")
    }

    version buildNumber

    intellij {
        version = ideaVersion
        plugins = ['git4idea']
        pluginName = 'com.microsoft.vso.idea'
        updateSinceUntilBuild = false

        // buildPlugin and runIde should depend on the reactive backend
        def reactiveBackend = file("../client/backend/build/install")
        task prepareBackendSandbox(type: Copy, dependsOn: ":client:backend:installDist") {
            from reactiveBackend
            into file("${prepareSandbox.destinationDir}/${prepareSandbox.pluginName}")
        }
        prepareSandbox.finalizedBy(prepareBackendSandbox)
    }

    jar {
        baseName 'com.microsoft.alm.plugin.idea'
    }

    task showVersion() {
        println("version = " + buildNumber)
        println("ideaVersion = " + ideaVersion)
    }

    task zip(dependsOn: ['buildPlugin','test']) {}
}

project(":L2Tests") {
    apply plugin: 'org.jetbrains.intellij'

    intellij {
        version = ideaVersion
        plugins = ['git4idea']
    }

    dependencies {
        // The plugin relies on an outdated version of jackson-databind being available in the classpath (it is a
        // required transitive dependency of com.microsoft.alm:com.microsoft.alm.client with no newer version
        // available). It is available in the product because of how IDEA classloaders work, but it gets overridden by
        // IDEA's instance of jackson-databind in tests. We have to load right version of the library by moving it on
        // top of the classpath.
        priorityTestCompile 'com.fasterxml.jackson.core:jackson-databind:2.4.1'

        compile project(':plugin')
    }

    jar {
        baseName 'com.microsoft.alm.L2'
    }

    test {
        forkEvery = 1
    }
}

/**
 * settings shared by the main projects (part 2)
 */
configure(mainProjects) {
    dependencies {
        codeAnalysisLibs 'com.google.code.findbugs:annotations:3.0.0'
        compile group: 'com.microsoft.alm', name: 'alm-http-client-dep', version: '0.4.3-SNAPSHOT'
        compile group: 'commons-io', name: 'commons-io', version: '2.4'
        compile group: 'org.glassfish.jersey.core', name: 'jersey-client', version: '2.28'
        compile group: 'org.glassfish.jersey.connectors', name: 'jersey-apache-connector', version: '2.28'
        compile group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: '2.28'
        compile (group: 'org.apache.httpcomponents', name: 'httpclient-win', version: '4.4.1') {
            exclude group: 'net.java.dev.jna', module: 'jna'
            exclude group: 'net.java.dev.jna', module: 'jna-platform'
        }

        compile (group: 'com.microsoft.alm', name: 'auth-core', version: '0.6.4') {
            exclude group: 'org.slf4j', module: 'slf4j-api'
        }

        testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
        testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '1.6.3'
        testCompile group: 'org.powermock', name: 'powermock-api-mockito', version: '1.6.3'
        testCompile group: 'org.powermock', name: 'powermock-classloading-xstream', version: '1.6.3'
        testCompile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    tasks.withType(FindBugs) {
        ignoreFailures = true
        reports {
            html { enabled = true }
            xml.enabled = !html.enabled
        }
    }

    /**
     * Open source prep
     */
    checkstyle {
        toolVersion = "6.1"
        ignoreFailures = false
        configFile = file "${rootDir}/config/checkstyle/custom-rules.xml"
        configProperties = [
            'checkstyle.java.header': "${rootDir}/config/checkstyle/java.header"
        ]
    }

    pmd {
        toolVersion = "5.0.3"
        ignoreFailures = true
        ruleSetFiles = files "${rootDir}/config/pmd/custom-pmd-rules.xml"
    }

    /**
     * Static code analysis tools
     */
    findbugs {
      toolVersion = "3.0.0"
    }
}
